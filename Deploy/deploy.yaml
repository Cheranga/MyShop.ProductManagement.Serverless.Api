parameters:
  - name: buildNumber
    type: string

steps:
  - task: AzureResourceManagerTemplateDeployment@3
    displayName: "Create resource group $(rgName)"
    inputs:
      deploymentScope: "Subscription"
      azureResourceManagerConnection: "$(azureSubscription)"
      location: "$(rgLocation)"
      deploymentMode: "Incremental"
      csmFile: "$(Pipeline.Workspace)/deploy/ResourceGroup/template.json"
      csmParametersFile: "$(Pipeline.Workspace)/deploy/ResourceGroup/template.parameters.json"
      overrideParameters: |
        -rgName "$(rgName)" 
        -rgLocation "$(rgLocation)" 
        -createNewRg $(createNewRg) 
        
  - task: AzurePowerShell@4
    displayName: "Delete old deployments"
    inputs:
      azureSubscription: "$(azureSubscription)"
      scriptType: 'inlineScript'
      azurePowerShellVersion: 'latestVersion'
      inline: |        
        $deployments = Get-AzResourceGroupDeployment -ResourceGroupName $(rgName) | Where-Object Timestamp -lt ((Get-Date).AddDays($(deploymentsOlderThan)))

        foreach ($deployment in $deployments) {
          Remove-AzResourceGroupDeployment -ResourceGroupName $(rgName) -Name $deployment.DeploymentName
          Write-Host 'Removed Deployment: ' $deployment.DeploymentName 
        } 

  - task: AzureCLI@2
    displayName: "Upload ARM templates and generate SAS token"
    inputs:
      azureSubscription: "$(azureSubscription)"
      scriptType: "pscore"
      scriptLocation: "inlineScript"
      inlineScript: |
        az storage account create -n "$(sharedStorageName)" -g "$(rgName)" -l "$(rgLocation)" 
        az storage container create -n "$(sharedContainerName)" --account-name "$(sharedStorageName)" --auth-mode login 
        $accountKey = (az storage account keys list -g "$(rgName)" -n "$(sharedStorageName)" | ConvertFrom-Json)[0].value
        az storage blob upload-batch --source "$(Pipeline.Workspace)/deploy/" --pattern *.json --destination "$(sharedContainerName)" --account-name $(sharedStorageName) --account-key $accountKey

        $expireTime = $(date -u -d '30 minutes' +%Y-%m-%dT%H:%MZ)
        $connection = az storage account show-connection-string -g "$(rgName)" --name "$(sharedStorageName)" --query connectionString      
        $token = az storage container generate-sas --name $(sharedContainerName) --expiry $expireTime --permissions r --output tsv --connection-string $connection

        Write-Host "##vso[task.setvariable variable=storageSasToken]$token"
        
  - task: AzureResourceManagerTemplateDeployment@3
    displayName: "Provision resources"
    inputs:
      azureResourceManagerConnection: "$(azureSubscription)"
      deploymentName: "main-$(funcAppName)-$(environmentName)-${{parameters.buildNumber}}-deployment"
      deploymentScope: "Resource Group"
      deploymentMode: "Incremental"      
      location: "$(rgLocation)"
      action: "Create Or Update Resource Group"
      resourceGroupName: "$(rgName)"
      csmFile: "$(Pipeline.Workspace)/deploy/main.json"
      overrideParameters: |
        -templateSas "$(storageSasToken)" 
        -buildNumber "${{parameters.buildNumber}}" 
        -rgName "$(rgName)" 
        -rgLocation "$(rgLocation)" 
        -sharedStorageName "$(sharedStorageName)" 
        -sharedStorageContainer "$(sharedContainerName)" 
        -serverName "$(serverName)" 
        -databaseName "$(databaseName)" 
        -adminUserName "$(adminUserName)" 
        -adminPassword "$(adminPassword)" 
        -allowedIpAddresses "$(allowedIpAddresses)" 
        -sgName "$(sgName)" 
        -sgType "$(sgType)" 
        -planName "$(planName)" 
        -planSku "$(planSku)" 
        -planTier "$(planTier)" 
        -funcAppName "$(funcAppName)" 
        -environmentName "$(environmentName)" 
        -sbWriteConnectionString "$(sbWriteConnectionString)" 
        -sbReadConnectionString "$(sbReadConnectionString)" 

#  The below two tasks ("Setting up variables to be transformed in configurations" and "Transform configurations" can be used to transform web API configurations)
  - task: AzurePowerShell@4
    displayName: "Setting up variables to be transformed in configurations"
    inputs:
      azureSubscription: "$(azureSubscription)"
      scriptType: 'inlineScript' # Optional. Options: filePath, inline
      azurePowerShellVersion: 'latestVersion' # Required. Options: latestVersion, otherVersion
      inline: |
        $functionAppDeployment="$(funcAppName)-"+"${{parameters.buildNumber}}-deployment"
        $functionMasterKey=(Get-AzResourceGroupDeployment -ResourceGroupName "$(rgName)" -Name "$functionAppDeployment").Outputs.masterKey.value
        # $stagingFunctionMasterKey=(Get-AzResourceGroupDeployment -ResourceGroupName "$(rgName)" -Name "$functionAppDeployment").Outputs.masterKeyStaging.value
        echo $functionMasterKey
        Write-Host "##vso[task.setvariable variable=functionMasterKey]$functionMasterKey"
        # Write-Host "##vso[task.setvariable variable=stagingFunctionMasterKey]$stagingFunctionMasterKey"

  - task: AzurePowerShell@2
    displayName: "Setup firewall rule for build agent"
    inputs:
      azureSubscription: "$(azureSubscription)"
      ScriptPath: "$(Pipeline.Workspace)/scripts/setupfirewall.ps1"
      ScriptArguments: "$(serverName) $(rgName)"
      azurePowerShellVersion: LatestVersion

  - task: AzureCLI@2
    displayName: "Migrate the database"
    inputs:
      azureSubscription: "$(azureSubscription)"
      scriptType: "pscore"
      scriptLocation: "inlineScript"
      inlineScript: |
        $dbDeployment = "$(serverName)"+"-"+"${{parameters.buildNumber}}"+"-deployment"
        $testConnectionString=$(az deployment group show -g "$(rgName)" -n "$dbDeployment" --query properties.outputs.connectionString.value)

        # echo $testConnectionString
        $(Pipeline.Workspace)/DbConsoleApp/MyShop.ProductManagement.DataMigration.exe $testConnectionString

  - task: AzurePowerShell@2
    displayName: "Remove firewall rule for build agent"
    inputs:
      azureSubscription: "$(azureSubscription)"
      ScriptPath: "$(Pipeline.Workspace)/scripts/removefirewall.ps1"
      ScriptArguments: "$(serverName) $(rgName)"
      azurePowerShellVersion: LatestVersion        

  - task: AzureAppServiceManage@0
    displayName: 'Stop Azure App Service (Staging)'
    inputs:
      azureSubscription: '$(azureSubscription)'    
      action: 'Stop Azure App Service' 
      WebAppName: "fn-$(funcAppName)-$(environmentName)"
      resourceGroupName: "$(rgName)"
      Slot: "Staging"
      SpecifySlotOrASE: true

  - task: AzureRmWebAppDeployment@4
    displayName: 'Deploy Azure Function App (Staging)'
    inputs:
      azureSubscription: '$(azureSubscription)'    
      appType: functionApp
      WebAppName: "fn-$(funcAppName)-$(environmentName)"
      package: '$(Pipeline.Workspace)/webapi/$(Build.BuildId).zip'
      enableCustomDeployment: true
      DeploymentType: zipDeploy
      JSONFiles: '**/host.json' 
      resourceGroupName: "$(rgName)"
      deployToSlotOrASE: true 
      SlotName: "Staging"

  - task: AzureAppServiceManage@0
    displayName: 'Start Azure App Service (Staging)'
    inputs:
      azureSubscription: '$(azureSubscription)'    
      action: 'Start Azure App Service' 
      WebAppName: "fn-$(funcAppName)-$(environmentName)"
      resourceGroupName: "$(rgName)"
      Slot: "Staging"
      SpecifySlotOrASE: true    

  - task: AzureAppServiceManage@0
    displayName: 'Swap slots (Staging to Production)'
    inputs:
      azureSubscription: '$(azureSubscription)'    
      action: 'Swap Slots' 
      WebAppName: "fn-$(funcAppName)-$(environmentName)"
      resourceGroupName: "$(rgName)"
      SourceSlot: 'staging'
      
  - task: AzureAppServiceManage@0
    displayName: 'Stop Azure App Service (Staging)'
    inputs:
      azureSubscription: '$(azureSubscription)'    
      action: 'Stop Azure App Service' 
      WebAppName: "fn-$(funcAppName)-$(environmentName)"
      resourceGroupName: "$(rgName)"
      Slot: "Staging"
      SpecifySlotOrASE: true       

  # - task: AzurePowerShell@4
  #   displayName: "Migrate database"
  #   inputs:
  #     azureSubscription: "$(azureSubscription)"
  #     scriptType: 'inlineScript' # Optional. Options: filePath, inline
  #     azurePowerShellVersion: 'latestVersion' # Required. Options: latestVersion, otherVersion
  #     inline: |
  #       $Body = @{
  #           "input" = "test"
  #       }

  #       $Header = @{
  #       "x-functions-key" = "$(functionMasterKey)"
  #       }

  #       $baseUrl = "https://fn-$(funcAppName)-$(environmentName).azurewebsites.net/api/v1/database"
 
  #       $Parameters = @{
  #         Method = "POST"
  #         Uri =  $baseUrl
  #         Body = ($Body | ConvertTo-Json) 
  #         Headers     = $Header
  #         ContentType = "application/json"
  #       }       

  #       Invoke-RestMethod @Parameters             
        